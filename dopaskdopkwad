local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Hax",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

function getRandomPlr()
    return game.Players:GetChildren()[math.random(1,#game.Players:GetChildren())]
end

function getClient()
    local plr = game.Players.LocalPlayer
local char = plr.Character
local humanoid = char.Humanoid

return plr,char,humanoid
end

local Universal = Window:CreateTab("Universal", 4483362458)

local Button = Universal:CreateButton({
   Name = "Destroy Rayfield",
   Callback = function()
   Rayfield:Destroy()
   end,
})

local Slider = Universal:CreateSlider({
   Name = "WalkSpeed",
   Range = {1, 1000},
   Increment = 1,
   Suffix = "WalkSpeed",
   CurrentValue = 10,
   Flag = "skibiditoilet+-", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   local plr,char,hum = getClient()
   hum.WalkSpeed = Value
   end,
})

local Slider = Universal:CreateSlider({
   Name = "JumpPower",
   Range = {1, 1000},
   Increment = 1,
   Suffix = "JumpPower",
   CurrentValue = 10,
   Flag = "aaaa", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   local plr,char,hum = getClient()
   hum.JumpPower = Value
   end,
})

local InfJump = Tab:CreateToggle({
   Name = "Inf Jump,
   CurrentValue = false,
   Flag = "dasdasdasda", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      print("Cheese")
   end,
})

local DOD = Window:CreateTab("Die of Death", 4483362458) -- Title, Image

local Button = DOD:CreateButton({
   Name = "Teleport to Random Player",
   Callback = function()
  local attacking = getRandomPlr()
        local plr,char,hum = getClient()
        char.HumanoidRootPart.CFrame = attacking.Character.HumanoidRootPart.CFrame
   end,
})

local Slider = DOD:CreateSlider({
   Name = "WalkSpeed",
   Range = {1, 100},
   Increment = 1,
   Suffix = "WalkSpeed",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   local plr,char,hum = getClient()
   char:SetAttribute("WalkSpeed", Value)
   end,
})

local MaxStamina = DOD:CreateSlider({
   Name = "Max Stamina",
   Range = {100,10000},
   Increment = 100,
   Suffix = "Stamina",
   CurrentValue = 10,
   Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   local plr,char,hum = getClient()
   plr.Character:SetAttribute("MaxStamina", Value)
   end,
})

game:GetService("UserInputService").JumpRequest:Connect(function()
    local plr,char,humanoid = getClient()

    if InfJump.CurrentValue == true then
        if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end
