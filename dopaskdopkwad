local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Hax",
   Icon = 0,
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ShowText = "Rayfield",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = { Enabled = false, Invite = "noinvitelink", RememberJoins = true },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

function getRandomPlr()
    return game.Players:GetChildren()[math.random(1,#game.Players:GetChildren())]
end

function getClient()
    local plr = game.Players.LocalPlayer
    local char = plr.Character
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    return plr,char,humanoid
end

-- Universal Tab
local Universal = Window:CreateTab("Universal", 4483362458)

-- Destroy Rayfield Button
Universal:CreateButton({
   Name = "Destroy Rayfield",
   Callback = function()
       Rayfield:Destroy()
   end,
})

-- WalkSpeed Slider
Universal:CreateSlider({
   Name = "WalkSpeed",
   Range = {1, 1000},
   Increment = 1,
   Suffix = "WalkSpeed",
   CurrentValue = 16,
   Flag = "WalkSpeedFlag",
   Callback = function(Value)
       local plr,char,hum = getClient()
       if hum then hum.WalkSpeed = Value end
   end,
})

-- JumpPower Slider
Universal:CreateSlider({
   Name = "JumpPower",
   Range = {1, 500},
   Increment = 1,
   Suffix = "JumpPower",
   CurrentValue = 50,
   Flag = "JumpPowerFlag",
   Callback = function(Value)
       local plr,char,hum = getClient()
       if hum then hum.JumpPower = Value end
   end,
})

-- Infinite Jump Toggle
local InfJump = Universal:CreateToggle({
   Name = "Inf Jump",
   CurrentValue = false,
   Flag = "InfJumpFlag",
   Callback = function(Value)
       -- nothing needed here, handled by UserInputService
   end,
})

-- Die of Death Tab
local DOD = Window:CreateTab("Die of Death", 4483362458)

-- Teleport Button
DOD:CreateButton({
   Name = "Teleport to Random Player",
   Callback = function()
       local attacking = getRandomPlr()
       local plr,char,hum = getClient()
       if char and attacking.Character and attacking.Character:FindFirstChild("HumanoidRootPart") then
           char.HumanoidRootPart.CFrame = attacking.Character.HumanoidRootPart.CFrame
       end
   end,
})

-- WalkSpeed Slider (DOD)
DOD:CreateSlider({
   Name = "WalkSpeed",
   Range = {1, 100},
   Increment = 1,
   Suffix = "WalkSpeed",
   CurrentValue = 10,
   Flag = "Slider1",
   Callback = function(Value)
       local plr,char,hum = getClient()
       if char then char:SetAttribute("WalkSpeed", Value) end
   end,
})

-- Max Stamina Slider
DOD:CreateSlider({
   Name = "Max Stamina",
   Range = {100,10000},
   Increment = 100,
   Suffix = "Stamina",
   CurrentValue = 100,
   Flag = "Slider2",
   Callback = function(Value)
       local plr,char,hum = getClient()
       if plr.Character then plr.Character:SetAttribute("MaxStamina", Value) end
   end,
})

-- Infinite Jump functionality
game:GetService("UserInputService").JumpRequest:Connect(function()
    local plr,char,hum = getClient()
    if InfJump.CurrentValue and hum and hum:GetState() ~= Enum.HumanoidStateType.Dead then
        hum:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

